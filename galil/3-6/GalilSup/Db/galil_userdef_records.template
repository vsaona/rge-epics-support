# $File: //ASP/Dev/SBS/4_Controls/4_3_Network_Infrastructure/4_3_1_Comms_Common_Services/sw/device_drivers/Galil/1-5/galilSup/Db/galil_userdef_records.template $
# $Revision: #1 $
# $DateTime: 2012/03/19 12:39:43 $
# $Author: cliftm $
#
# Description
# Template file for user defined commands and monitors (DRVCMD = CMD), and
#
# Template file for user defined variable read/write access (DRVCMD = VAR)
# Demonstrates how to read/write user defined variables from/to the controller
#
# This library is free software; you can redistribute it and/or
# modify it under the terms of the GNU Lesser General Public
# Licence as published by the Free Software Foundation; either
# version 2.1 of the Licence, or (at your option) any later version.
#
# This library is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Lesser General Public Licence for more details.
#
# You should have received a copy of the GNU Lesser General Public
# Licence along with this library; if not, write to the Free Software
# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
#
# Contact details:
# Mark Clift
# email: padmoz@tpg.com.au

# TODO. Everything here needs testing!

# Calibrated target positions. Are displayed on GUIs along with current position.
# TODO. These should be set to the calibrated motor positions once we figure them out.
record(ai, "$(P)$(M)_home") {
    field(VAL,"0")
}
record(ai, "$(P)$(M)_pos1") {
    field(VAL,"10")
}
record(ai, "$(P)$(M)_pos2") {
    field(VAL,"20")
}
record(ai, "$(P)$(M)_pos3") {
    field(VAL,"30")
}
record(ai, "$(P)$(M)_pos4") {
    field(VAL,"40")
}
record(ai, "$(P)$(M)_pos5") {
    field(VAL,"50")
}
record(ai, "$(P)$(M)_pos6") {
    field(VAL,"60")
}
record(ai, "$(P)$(M)_pos7") {
    field(VAL,"70")
}

# Calibrated endpoint positions. These are used as the lower and upper limits for the motos, and a
#     major alarm should be thrown if these are reached.
# TODO. These should be set to the calibrated motor positions once we figure them out.
record(ai, "$(P)$(M)_lowlimit") {
	field(VAL,"0")
}
record(ai, "$(P)$(M)_highlimit") {
	field(VAL,"80")
}

# Commands to go to calibrated positions, for GUI buttons.
# NOTE. The PP forces the output link PV to process.
record(ao, "$(P)$(M)_go_home") {
    field(OMSL,"closed_loop")
    field(DOL, "$(P)$(M)_home")
    field(OUT, "$(P)$(M).VAL PP")
}
record(ao, "$(P)$(M)_go_pos1") {
    field(OMSL,"closed_loop")
    field(DOL, "$(P)$(M)_pos1")
    field(OUT, "$(P)$(M).VAL PP")
}
record(ao, "$(P)$(M)_go_pos2") {
    field(OMSL,"closed_loop")
    field(DOL, "$(P)$(M)_pos2")
    field(OUT, "$(P)$(M).VAL PP")
}
record(ao, "$(P)$(M)_go_pos3") {
    field(OMSL,"closed_loop")
    field(DOL, "$(P)$(M)_pos3")
    field(OUT, "$(P)$(M).VAL PP")
}
record(ao, "$(P)$(M)_go_pos4") {
    field(OMSL,"closed_loop")
    field(DOL, "$(P)$(M)_pos4")
    field(OUT, "$(P)$(M).VAL PP")
}
record(ao, "$(P)$(M)_go_pos5") {
    field(OMSL,"closed_loop")
    field(DOL, "$(P)$(M)_pos5")
    field(OUT, "$(P)$(M).VAL PP")
}
record(ao, "$(P)$(M)_go_pos6") {
    field(OMSL,"closed_loop")
    field(DOL, "$(P)$(M)_pos6")
    field(OUT, "$(P)$(M).VAL PP")
}
record(ao, "$(P)$(M)_go_pos7") {
    field(OMSL,"closed_loop")
    field(DOL, "$(P)$(M)_pos7")
    field(OUT, "$(P)$(M).VAL PP")
}

# Calculate whether the band is at each of the calibrated positions.
# WARNING. CALC is silently truncated to 40 characters!!!!
# TODO. Tolerance should be set to an agreed value.
record(ai, "$(P)$(M)_tolerance") {
    field(VAL, "0.1")
}

record(calc, "$(P)$(M)_at_pos1") {
    field(SCAN, "1 second")
    field(INPA, "$(P)$(M).RBV")
    field(INPB, "$(P)$(M)_pos1")
    field(INPC, "$(P)$(M)_tolerance")
    field(CALC, "ABS(A-B)<C ? 1 : 0")
}
record(calc, "$(P)$(M)_at_pos2") {
    field(SCAN, "1 second")
    field(INPA, "$(P)$(M).RBV")
    field(INPB, "$(P)$(M)_pos2")
    field(INPC, "$(P)$(M)_tolerance")
    field(CALC, "ABS(A-B)<C ? 2 : 0")
}
record(calc, "$(P)$(M)_at_pos3") {
    field(SCAN, "1 second")
    field(INPA, "$(P)$(M).RBV")
    field(INPB, "$(P)$(M)_pos3")
    field(INPC, "$(P)$(M)_tolerance")
    field(CALC, "ABS(A-B)<C ? 3 : 0")
}
record(calc, "$(P)$(M)_at_pos4") {
    field(SCAN, "1 second")
    field(INPA, "$(P)$(M).RBV")
    field(INPB, "$(P)$(M)_pos4")
    field(INPC, "$(P)$(M)_tolerance")
    field(CALC, "ABS(A-B)<C ? 4 : 0")
}
record(calc, "$(P)$(M)_at_pos5") {
    field(SCAN, "1 second")
    field(INPA, "$(P)$(M).RBV")
    field(INPB, "$(P)$(M)_pos5")
    field(INPC, "$(P)$(M)_tolerance")
    field(CALC, "ABS(A-B)<C ? 5 : 0")
}
record(calc, "$(P)$(M)_at_pos6") {
    field(SCAN, "1 second")
    field(INPA, "$(P)$(M).RBV")
    field(INPB, "$(P)$(M)_pos6")
    field(INPC, "$(P)$(M)_tolerance")
    field(CALC, "ABS(A-B)<C ? 6 : 0")
}
record(calc, "$(P)$(M)_at_pos7") {
    field(SCAN, "1 second")
    field(INPA, "$(P)$(M).RBV")
    field(INPB, "$(P)$(M)_pos7")
    field(INPC, "$(P)$(M)_tolerance")
    field(CALC, "ABS(A-B)<C ? 7 : 0")
}
record(calc, "$(P)$(M)_at_home") {
    field(SCAN, "1 second")
    field(INPA, "$(P)$(M).RBV")
    field(INPB, "$(P)$(M)_home")
    field(INPC, "$(P)$(M)_tolerance")
    field(CALC, "ABS(A-B)<C ? 8 : 0")
}

# Check if the band is not moving.
record(calc, "$(P)$(M)_moving") {
	field(SCAN, "1 second")
	field(INPA, "$(P)$(M).MOVN")
	field(CALC, "!(A=0) ? 9 : 0")
}

# Check whether the band has gone beyond the limits.
record(calc, "$(P)$(M)_at_lowlimit") {
	field(SCAN, "1 second")
	field(INPA, "$(P)$(M).RBV")
	field(INPB, "$(P)$(M)_lowlimit")
	field(CALC, "A<B ? 10 : 0")
}
record(calc, "$(P)$(M)_at_highlimit") {
	field(SCAN, "1 second")
	field(INPA, "$(P)$(M).RBV")
	field(INPB, "$(P)$(M)_highlimit")
	field(CALC, "B<A ? 11 : 0")
}

# Select target type as an integer, trigger the mbbi below.
# NOTE. This record will return the highest value between the previously defined CALCs. This assumes
# 		that *no more than one calc is greater than 0*. This should always be the case, unless tol-
#       erance is set too high.
record(sel, "$(P)$(M)_sel_tgttype") {
	field(SCAN, "1 second")
	field(INPA, "$(P)$(M)_at_pos1")
	field(INPB, "$(P)$(M)_at_pos2")
	field(INPC, "$(P)$(M)_at_pos3")
	field(INPD, "$(P)$(M)_at_pos4")
	field(INPE, "$(P)$(M)_at_pos5")
	field(INPF, "$(P)$(M)_at_pos6")
	field(INPG, "$(P)$(M)_at_pos7")
	field(INPH, "$(P)$(M)_at_home")
	field(INPI, "$(P)$(M)_moving")
	field(INPJ, "$(P)$(M)_at_lowlimit")
	field(INPK, "$(P)$(M)_at_highlimit")
	field(FLNK, "$(P)$(M)_tgttype.PROC")
}

# Target type. Goes on GUIs, in RCDB, can be an alarm.
# NOTE. Ideally, we'd want the major alarms to also trigger a stop signal to stop the motor.
record(mbbi, "$(P)$(M)_tgttype") {
    field(INP,  "$(P)$(M)_sel_tgttype")
    field(ZRVL, "0")
	field(ZRST, "Not Moving")
	field(ZRSV, "MAJOR")
    field(ONVL,  "1")
	field(ONST, "Target 1")
    field(TWVL,  "2")
	field(TWST, "Target 2")
	field(THVL,  "3")
	field(THST, "Target 3")
	field(FRVL,  "4")
	field(FRST, "Target 4")
	field(FVVL,  "5")
	field(FVST, "Target 5")
	field(SXVL,  "6")
	field(SXST, "Target 6")
	field(SVVL,  "7")
	field(SVST, "Target 7")
	field(EIVL, "8")
	field(EIST, "Home")
	field(NIVL, "9")
	field(NIST, "Moving")
	field(NISV, "MINOR")
	field(TEVL, "10")
	field(TEST, "Low Limit")
	field(TESV, "MAJOR")
	field(ELVL, "11")
	field(ELST, "High Limit")
	field(ELSV, "MAJOR")
}
